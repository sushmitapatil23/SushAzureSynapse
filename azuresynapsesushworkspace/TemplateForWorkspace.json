{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "azuresynapsesushworkspace"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/externaltablesqlscript')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDelimitedTextFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseDelimitedTextFormat] \n\tWITH ( FORMAT_TYPE = DELIMITEDTEXT ,\n\t       FORMAT_OPTIONS (\n\t\t\t FIELD_TERMINATOR = ',',\n\t\t\t USE_TYPE_DEFAULT = FALSE\n\t\t\t))\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'azuresynapsesushcontainer_azuresynapsesushadlsgen2_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [azuresynapsesushcontainer_azuresynapsesushadlsgen2_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://azuresynapsesushcontainer@azuresynapsesushadlsgen2.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE [dbo].[EmployeeSalary] (\n\t[C1] nvarchar(4000),\n\t[C2] nvarchar(4000),\n\t[C3] nvarchar(4000),\n\t[C4] nvarchar(4000),\n\t[C5] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'synapsedemo/EmployeeSalary.txt',\n\tDATA_SOURCE = [azuresynapsesushcontainer_azuresynapsesushadlsgen2_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDelimitedTextFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM [dbo].[EmployeeSalary]\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_AutoExternalTablewithParquetFile')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'azuresynapsesushcontainer_azuresynapsesushadlsgen2_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [azuresynapsesushcontainer_azuresynapsesushadlsgen2_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://azuresynapsesushcontainer@azuresynapsesushadlsgen2.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE dbo.AutoExternalTablewithParquetFile (\n\t[DateID] int,\n\t[MedallionID] int,\n\t[HackneyLicenseID] int,\n\t[PickupTimeID] int,\n\t[DropoffTimeID] int,\n\t[PickupGeographyID] int,\n\t[DropoffGeographyID] int,\n\t[PickupLatitude] float,\n\t[PickupLongitude] float,\n\t[PickupLatLong] nvarchar(4000),\n\t[DropoffLatitude] float,\n\t[DropoffLongitude] float,\n\t[DropoffLatLong] nvarchar(4000),\n\t[PassengerCount] int,\n\t[TripDurationSeconds] int,\n\t[TripDistanceMiles] float,\n\t[PaymentType] nvarchar(4000),\n\t[FareAmount] numeric(19,4),\n\t[SurchargeAmount] numeric(19,4),\n\t[TaxAmount] numeric(19,4),\n\t[TipAmount] numeric(19,4),\n\t[TollsAmount] numeric(19,4),\n\t[TotalAmount] numeric(19,4)\n\t)\n\tWITH (\n\tLOCATION = 'synapsedemo/NYCTripSmall.parquet',\n\tDATA_SOURCE = [azuresynapsesushcontainer_azuresynapsesushadlsgen2_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.AutoExternalTablewithParquetFile\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_CETAS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL TABLE nyctaxi.CETASpassengercountstates \nWITH\n(\n    LOCATION= 'Synapsesqldatabase/NYCTaxi/Aggdata/',\n     DATA_SOURCE= demoDataSource,\n   -- DATA_SOURCE = azuresynapsesushcontainer_azuresynapsesushadlsgen2_dfs_core_windows_net,\n    FILE_FORMAT= ParquestfileFormat\n)\nAS\nSELECT PassengerCount as PassengerCount,\n      SUM(TripDistanceMiles) as SumTripDistance_miles,\n      AVG(TripDistanceMiles) as AvgTripDistance_miles\nFROM\nOPENROWSET(\n        BULK 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/azuresynapsesushcontainer/synapsedemo/NYCTripSmall.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [rows]\n\nWHERE TripDistanceMiles > 0 AND PassengerCount > 0\nGROUP BY PassengerCount;\t\n\nGO\n\n--  select * from nyctaxi.CETASpassengercountstates ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_CTAS_EmployeeHash')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[Employees]\n(\n    empid int NOT NULL,\n    empname NVARCHAR(50),\n    gender NVARCHAR(10)\n)\nWITH\n(\n    DISTRIBUTION = HASH (empid),\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n-- insert into Employees values (1, 'Maheer', 'Male')\n-- insert into Employees values (1, 'Ashi', 'Female')\n-- insert into Employees values (1, 'Wafa', 'Male')\n\n-- select * from [dbo].[Employees]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_CTAS_EmployeeRoundRobin')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE EmployeesNewExistingCTASEmployee\nWITH (\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n)\nAS\nSELECT * FROM Employees;\n\nGO\n\n-- SELECT * from EmployeesNewExistingCTASEmployee\n\n-- SELECT * INTO EmployeesNewExistingCTASEmployee2\n-- from EmployeesNewExistingCTASEmployee\n\n-- SELECT * from EmployeesNewExistingCTASEmployee2\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_EmployeeSalary')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select \n    depname ,  SUM(salary) as totalsalary\nFROM\nOPENROWSET (\nBulk 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/azuresynapsesushcontainer/synapsedemo/EmployeeSalary.txt',\nFormat= 'csv',\nHEADER_ROW = TRUE,\nPARSER_VERSION = '2.0'\n) as [RESULT]\nGROUP BY depname\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_ExternalFileFormat')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL FILE FORMAT ParquetfileFormat\nWITH\n(\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_ExternalTableDedicatedPool')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL TABLE dbo.Dedicated_NYCTaxiTripSmall\n    (\n    DateID \tInt,\n    MedallionID Int\t,\n    HackneyLicenseID Int,\n    PickupTimeID\tInt,\n    DropoffTimeID\tInt,\n    PickupGeographyID\tInt,\n    DropoffGeographyID Int\t,\n    PickupLatitude float\t,\n    PickupLongitude float\t,\n    PickupLatLong nvarchar(4000),\n    DropoffLatitude\t float,\n    DropoffLongitude float\t,\n    DropoffLatLong nvarchar(4000)\t,\n    PassengerCount int\t,\n    TripDurationSeconds int\t,\n    TripDistanceMiles float\t,\n    PaymentType nvarchar(4000)\t,\n    FareAmount numeric(19,4)\t,\n    SurchargeAmount numeric(19,4)\t,\n    TaxAmount numeric(19,4)\t,\n    TipAmount numeric(19,4)\t,\n    TollsAmount\tnumeric(19,4),\n    TotalAmount\tnumeric(19,4)\n    )\nWITH\n    (\n        LOCATION = '/synapsedemo/NYCTripSmall.parquet',\n        DATA_SOURCE = sushadlsgen2,\n        FILE_FORMAT = SynapseParquetfileFormat     \n    )\nGO\n\n\n--  select top 10 * from dbo.Dedicated_NYCTaxiTripSmall\n\n-- Based on External table - you can copy data to Physical Table",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_NYCTaxiSmallTrip')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'NYCTaxiTripSmall' AND O.TYPE = 'U' AND S.NAME = 'dbo')\nCREATE TABLE dbo.NYCTaxiTripSmall\n    (\n    DateID \tInt,\n    MedallionID Int\t,\n    HackneyLicenseID Int,\n    PickupTimeID\tInt,\n    DropoffTimeID\tInt,\n    PickupGeographyID\tInt,\n    DropoffGeographyID Int\t,\n    PickupLatitude float\t,\n    PickupLongitude float\t,\n    PickupLatLong nvarchar(4000),\n    DropoffLatitude\t float,\n    DropoffLongitude float\t,\n    DropoffLatLong nvarchar(4000)\t,\n    PassengerCount int\t,\n    TripDurationSeconds int\t,\n    TripDistanceMiles float\t,\n    PaymentType nvarchar(4000)\t,\n    FareAmount numeric(19,4)\t,\n    SurchargeAmount numeric(19,4)\t,\n    TaxAmount numeric(19,4)\t,\n    TipAmount numeric(19,4)\t,\n    TollsAmount\tnumeric(19,4),\n    TotalAmount\tnumeric(19,4)\n    )\nWITH\n    (\n    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\nGO\n\nCOPY INTO dbo.NYCTaxiTripSmall\n(DateID 1,MedallionID 2,HackneyLicenseID 3,PickupTimeID 4,DropoffTimeID 5,\nPickupGeographyID 6,DropoffGeographyID 7,PickupLatitude 8,PickupLongitude 9,\nPickupLatLong 10,DropoffLatitude 11, DropoffLongitude 12,DropoffLatLong 13,PassengerCount 14,\nTripDurationSeconds 15,TripDistanceMiles 16,PaymentType 17,FareAmount 18,SurchargeAmount 19,\nTaxAmount 20,TipAmount 21,TollsAmount 22,TotalAmount 23\n )\nFROM 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/azuresynapsesushcontainer/synapsedemo/NYCTripSmall.parquet'\nWITH\n(\n    FILE_TYPE = 'PARQUET'\n    ,MAXERRORS = 0\n    ,IDENTITY_INSERT = 'OFF'\n    ,AUTO_CREATE_TABLE ='ON'\n   )\n\n--  drop TABLE dbo.NYCTaxiTripSmall\n\n--  select count(*) from dbo.NYCTaxiTripSmall\n\n/* SELECT PassengerCount as PassengerCount,\n      SUM(TripDistanceMiles) as SumTripDistance_miles,\n      AVG(TripDistanceMiles) as AvgTripDistance_miles\nINTO dbo.PassengerCountStats\nFROM  dbo.NYCTaxiTripSmall\nWHERE TripDistanceMiles > 0 AND PassengerCount > 0\nGROUP BY PassengerCount;\n\nSELECT * FROM dbo.PassengerCountStats\nORDER BY PassengerCount;  */\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_PersonHash')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[Person]\n(\n    id int NOT NULL,\n    name nvarchar(50)\n)\nWITH\n(\n    DISTRIBUTION = HASH (id),\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n-- Drop table [dbo].[Table]\n\ninsert into [dbo].[Person] values (1,'Susmita')\ninsert into [dbo].[Person] values (2,'Pandit')\n\nselect * from Person\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_externalNYCTaxiSmall')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL DATA SOURCE [MyExternalDataSource]\nWITH (\n    TYPE = HADOOP,\n    LOCATION = 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/azuresynapsesushcontainer/synapsedemo/NYCTripSmall.parquet'\n);\n\nCREATE EXTERNAL TABLE dbo.YourParquetTable\nWITH (\n    LOCATION = 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/azuresynapsesushcontainer/synapsedemo/NYCTripSmall.parquet',\n    DATA_SOURCE = MyExternalDataSource,\n    FILE_FORMAT = ParquetFormat\n)\nAS SELECT * FROM OPENROWSET(\n    BULK 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/azuresynapsesushcontainer/synapsedemo/NYCTripSmall.parquet',\n    DATA_SOURCE = 'MyExternalDataSource',\n    FORMAT='PARQUET'\n);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_generateExternalResources')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "use synapsesqldatabase\nGO\n\n--  create master key that will protect to credentials\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Welcome$1Hello@1'\n\n-- go to synapse resource group and ADLS storage account -- shared access signature -- click on all checkboxes\n-- service, container , object in allowed resource types \n-- click on Generate SAS and connection string button then copy SAS Token \n-- paste it in Secret as per shown below\nCREATE DATABASE SCOPED CREDENTIAL democredential\nWITH IDENTITY = 'SHARED ACCESS SIGNATURE',\n-- SECRET = 'sv=2022-11-02&ss=bfqt&srt=sco&sp=rwdlacupyx&se=2025-03-19T15:19:58Z&st=2025-03-19T07:19:58Z&spr=https&sig=GhfgxsNwbTrzwvf8wnmlPg1MX%2FARNsEYJKQCJ5M6I3Y%3D'\nSECRET = 'sv=2022-11-02&ss=bfqt&srt=sco&sp=rwdlacupyx&se=2025-03-19T19:57:07Z&st=2025-03-19T11:57:07Z&spr=https&sig=5jdwiN6%2FshQUecoy36zCEITHc9KytYweC9ouATUCoi4%3D'\nGO\n\n-- go to synapse resource group and ADLS storage account \n-- settings  -- Endpoints -- Data Lake Storage -- Primary End Point -- Copy and paste it as per below\n\n    CREATE EXTERNAL DATA SOURCE demoDataSource WITH (\n    LOCATION = 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/' ,\n    CREDENTIAL = democredential\n\n\n)\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_generateExternalResourcesDedicatedPool')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Welcome$1Hello@1'\n\n-- DROP database SCOPED CREDENTIAL MSI_sushadlsgen2\n\nCREATE DATABASE SCOPED CREDENTIAL MSI_sushadlsgen2\nWITH IDENTITY = 'Managed Identity'\n\n-- go to synapse resource group and ADLS storage account \n-- settings  -- Endpoints -- Data Lake Storage -- Primary End Point -- Copy and paste it as per below\n\n    CREATE EXTERNAL DATA SOURCE sushadlsgen2 \n    WITH \n    (\n        --LOCATION = 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/' ,  -- https -- not supported\n        --\n        LOCATION = 'abfss://azuresynapsesushcontainer@azuresynapsesushadlsgen2.dfs.core.windows.net',\n        CREDENTIAL = MSI_sushadlsgen2,\n        TYPE = HADOOP\n    )\n\n-- DROP external Data Source sushadlsgen2\n\n\n\nCREATE EXTERNAL FILE FORMAT SynapseParquetfileFormat\nWITH\n(\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\n\n-- DROP external File format SynapseParquetfileFormat\n\n\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_readParquetCSVFile')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "--- Read Parquet File\n\nselect top 10 *\nfrom openrowset(\n    bulk 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/azuresynapsesushcontainer/synapsedemo/NYCTripSmall.parquet',\n    format = 'parquet') as rows\n\n--- Read CSV File with limited column\n\n    select Top 10 *\n    from openrowset(\n    bulk 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/azuresynapsesushcontainer/synapsedemo/Employees.csv',\n    format = 'csv',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = True\n    )\n    WITH\n    (\n        Emp_Id int, Dept_Id int, Salary int\n    )\n    as rows\n\n\n--- Read CSV File\n\n    select Top 10 *\n    from openrowset(\n    bulk 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/azuresynapsesushcontainer/synapsedemo/Employees.csv',\n    format = 'csv',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = True\n    )    as rows\n\n\n    --- Read CSV File from Blob Storage \n    select Top 10 *\n    from openrowset(\n    bulk 'https://storageaccountadfsush.blob.core.windows.net/source/customerPurchases.csv',\n    format = 'csv',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = True\n    )    as rows\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_readParquetFileautoscript')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://azuresynapsesushadlsgen2.dfs.core.windows.net/azuresynapsesushcontainer/NYCTaxi/parquetfile/part-00000-ca9112b6-e14f-4e41-a0aa-5b4c3e7ec526-c000.snappy.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_runfromdedicatedsqlpool')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [DateID]\n,[MedallionID]\n,[HackneyLicenseID]\n,[PickupTimeID]\n,[DropoffTimeID]\n,[PickupGeographyID]\n,[DropoffGeographyID]\n,[PickupLatitude]\n,[PickupLongitude]\n,[PickupLatLong]\n,[DropoffLatitude]\n,[DropoffLongitude]\n,[DropoffLatLong]\n,[PassengerCount]\n,[TripDurationSeconds]\n,[TripDistanceMiles]\n,[PaymentType]\n,[FareAmount]\n,[SurchargeAmount]\n,[TaxAmount]\n,[TipAmount]\n,[TollsAmount]\n,[TotalAmount]\n FROM [dbo].[NYCTaxiTripSmall]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_tablePassengerCountStats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT PassengerCount as PassengerCount,\n      SUM(TripDistanceMiles) as SumTripDistance_miles,\n      AVG(TripDistanceMiles) as AvgTripDistance_miles\nINTO dbo.PassengerCountStats\nFROM  dbo.NYCTaxiTripSmall\nWHERE TripDistanceMiles > 0 AND PassengerCount > 0\nGROUP BY PassengerCount;\n\nSELECT * FROM dbo.PassengerCountStats\nORDER BY PassengerCount;\n\n-- drop table dbo.PassengerCountStats",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql_top100PassengerCount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [PassengerCount]\n,[SumTripDistance_miles]\n,[AvgTripDistance_miles]\n FROM [nyctaxi].[dbo].[passengercountstats]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook_1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "144f56fb-6122-47fd-80ef-9faae77a6d1a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"firstname = \"Susmita \"\n",
							"lastname = \"Pandit\"\n",
							""
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"print(\"Hello \" + firstname + \" \"+ lastname )"
						],
						"outputs": [],
						"execution_count": 43
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook_CallReadNotebook1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "46de8c38-d68b-41d2-a338-85c21ca528c5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%run /Notebook_1"
						],
						"outputs": [],
						"execution_count": 29
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook_CallReadNotebook1ByParameter')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "629c2385-2431-45f0-9009-75a1e54c4032"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": []
						},
						"source": [
							"%run /Notebook_1 {'firstname':'Devansh','lastname':'Patil'}"
						],
						"outputs": [],
						"execution_count": 46
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook_MSSparkUtils')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0b533bd1-ade1-4723-87a4-1f500d55b860"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from notebookutils import mssparkutils\n",
							"mssparkutils.fs.help()\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"mssparkutils.fs.ls('/synapsedemo')"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook_ReadByPipeline')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3f0f87b1-877b-4703-8375-0e21064f78ef"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"name = \"Hello Susmita\""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"print(name)"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook_txtbtnUI')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c0473baa-a93c-4859-9976-12e8376e4e6c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from ipywidgets import widgets\n",
							"\n",
							"lbl1= widgets.Label(value='First Name')\n",
							"display(lbl1)\n",
							"txt1=widgets.Text()\n",
							"display(txt1)\n",
							"\n",
							"lbl2= widgets.Label(value='Second Name')\n",
							"display(lbl2)\n",
							"txt2=widgets.Text()\n",
							"display(txt2)\n",
							"\n",
							"btn= widgets.Button(description ='Get Full Name')\n",
							"display(btn)\n",
							"\n",
							"lblFullname= widgets.Label()\n",
							"display(lblFullname)\n",
							"\n",
							"def getfullname(b):\n",
							"    lblFullname.value = 'Full Name is : ' + txt1.value + ' ' + txt2.value \n",
							"\n",
							"btn.on_click(getfullname)"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dedicatedsushsqlpool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sparkpool1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}